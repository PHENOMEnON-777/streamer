


# MYSQL_USER=root
# MYSQL_PASSWORD=assolaange777
# MYSQL_SERVER=localhost
# MYSQL_PORT=3306
# MYSQL_DB=streamer
DATABASE_URL=


SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
EMAIL_ADDRESS=assolaange777@gmail.com
EMAIL_PASSWORD=w p j v t j h r g s p d c n r k



# # rpi_tank_monitor.py

# import os
# import time
# import random
# import uuid
# from datetime import datetime, timezone
# from sqlalchemy import create_engine, Column, String, Float, DateTime, Boolean, Integer, ForeignKey
# from sqlalchemy.orm import sessionmaker, declarative_base, Mapped, mapped_column, relationship
# from sqlalchemy.dialects.mysql import TINYINT # Although we use SQLite, we might use common types
# import requests
# from dotenv import load_dotenv

# # --- Raspberry Pi GPIO Setup ---
# try:
#     import RPi.GPIO as GPIO
#     GPIO_AVAILABLE = True
# except ImportError:
#     print("RPi.GPIO library not found. Running in simulation mode for HC-SR04 sensor.")
#     GPIO_AVAILABLE = False

# # --- Configuration ---
# load_dotenv() # Load environment variables from .env file

# # FastAPI Server URL (replace with your main machine's IP address)
# # Example: http://192.168.1.100:8000
# FASTAPI_BASE_URL = os.getenv("FASTAPI_BASE_URL")
# if not FASTAPI_BASE_URL:
#     raise ValueError("FASTAPI_BASE_URL not set in .env file. Please set it to your main machine's FastAPI server URL.")

# # The unique ID for this Raspberry Pi's station.
# # IMPORTANT: This StationService ID MUST exist in your main MySQL database's stationservice table.
# # You would typically create this StationService record in your FastAPI project,
# # get its ID, and then put it here.
# STATION_ID = os.getenv("STATION_ID")
# if not STATION_ID:
#     raise ValueError("STATION_ID not set in .env file. Please set it to the UUID of the StationService this Pi monitors.")

# # Data Sending Interval
# SEND_INTERVAL_SECONDS = 10

# # Local SQLite Database Path on Raspberry Pi
# DB_FILE = "rpi_petrol_data.db"
# DATABASE_URL = f"sqlite:///{DB_FILE}"

# # --- HC-SR04 Ultrasonic Sensor Configuration ---
# TRIG_PIN = 18  # GPIO pin for trigger
# ECHO_PIN = 24  # GPIO pin for echo

# # Tank dimensions and calibration for 1L bottle
# TANK_HEIGHT_CM = float(os.getenv("TANK_HEIGHT_CM", "25"))  # Total tank height in cm (typical 1L bottle height)
# SENSOR_OFFSET_CM = float(os.getenv("SENSOR_OFFSET_CM", "2"))  # Distance from sensor to tank top in cm
# TANK_VOLUME_LITERS = float(os.getenv("TANK_VOLUME_LITERS", "1"))  # Total tank volume in liters (1L bottle)
# MIN_DISTANCE_CM = float(os.getenv("MIN_DISTANCE_CM", "3"))  # Minimum distance when bottle is full
# MAX_DISTANCE_CM_TANK = float(os.getenv("MAX_DISTANCE_CM_TANK", "30"))  # Maximum distance when bottle is empty

# # Measurement settings
# MAX_DISTANCE_CM = 400  # Maximum reliable distance for HC-SR04
# MEASUREMENT_TIMEOUT = 0.05  # 50ms timeout for echo
# NUM_SAMPLES = 5  # Number of samples to average for stable reading

# # --- GPIO Initialization ---
# if GPIO_AVAILABLE:
#     GPIO.setmode(GPIO.BCM)
#     GPIO.setup(TRIG_PIN, GPIO.OUT)
#     GPIO.setup(ECHO_PIN, GPIO.IN)
#     GPIO.output(TRIG_PIN, False)
#     print(f"HC-SR04 configured: TRIG_PIN={TRIG_PIN}, ECHO_PIN={ECHO_PIN}")
#     print(f"Tank configuration: Height={TANK_HEIGHT_CM}cm, Volume={TANK_VOLUME_LITERS}L, Offset={SENSOR_OFFSET_CM}cm")
#     print(f"Distance range: Min={MIN_DISTANCE_CM}cm (full), Max={MAX_DISTANCE_CM_TANK}cm (empty)")
# else:
#     print("GPIO not available, skipping hardware setup.")

# # --- SQLAlchemy Setup for Local SQLite DB ---
# Base = declarative_base()

# class Tank(Base):
#     __tablename__ = 'tank'
#     id: Mapped[str] = mapped_column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()), unique=True, nullable=False)
#     type: Mapped[str] = mapped_column(String(50), nullable=False)
#     level: Mapped[float] = mapped_column(Float, nullable=False)
#     volume: Mapped[float] = mapped_column(Float, nullable=False)
#     quantity: Mapped[float] = mapped_column(Float, nullable=False)
#     temperature: Mapped[float] = mapped_column(Float, nullable=False)
#     density: Mapped[float] = mapped_column(Float, nullable=False)
#     createdAt: Mapped[datetime] = mapped_column(DateTime, default=lambda: datetime.now(timezone.utc), nullable=False)
#     updateAt: Mapped[datetime] = mapped_column(DateTime, default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc), nullable=False)
#     station_id: Mapped[str] = mapped_column(String(36), nullable=False) # Not a ForeignKey in SQLite for simplicity here
#     is_sent: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False) # Flag to track if sent to main DB

#     def __repr__(self):
#         return f"<Tank(id='{self.id}', type='{self.type}', level={self.level}, temp={self.temperature}, is_sent={self.is_sent})>"

#     def to_dict(self):
#         """Converts the Tank object to a dictionary suitable for JSON/API payload."""
#         return {
#             "id": self.id,
#             "type": self.type,
#             "level": self.level,
#             "volume": self.volume,
#             "quantity": self.quantity,
#             "temperature": self.temperature,
#             "density": self.density,
#             "createdAt": self.createdAt.isoformat() if self.createdAt else None,
#             "updateAt": self.updateAt.isoformat() if self.updateAt else None,
#             "station_id": self.station_id,
#         }

# engine = create_engine(DATABASE_URL)
# Base.metadata.create_all(engine) # Create the table if it doesn't exist
# Session = sessionmaker(bind=engine)

# # --- HC-SR04 Sensor Reading Functions ---
# def measure_distance_cm():
#     """
#     Measures distance using HC-SR04 ultrasonic sensor.
#     Returns:
#         float: Distance in centimeters, or None if measurement failed
#     """
#     if not GPIO_AVAILABLE:
#         # Simulate sensor reading for testing
#         simulated_distance = random.uniform(10, TANK_HEIGHT_CM + SENSOR_OFFSET_CM)
#         print(f"SIMULATION MODE: Distance measured: {simulated_distance:.2f} cm")
#         return simulated_distance
    
#     try:
#         # Ensure trigger is low
#         GPIO.output(TRIG_PIN, False)
#         time.sleep(0.000002)  # 2 microseconds
        
#         # Send 10 microsecond pulse to trigger
#         GPIO.output(TRIG_PIN, True)
#         time.sleep(0.00001)  # 10 microseconds
#         GPIO.output(TRIG_PIN, False)
        
#         # Record time when echo goes high
#         start_time = time.time()
#         timeout_start = start_time
        
#         # Wait for echo to go high (with timeout)
#         while GPIO.input(ECHO_PIN) == 0:
#             start_time = time.time()
#             if start_time - timeout_start > MEASUREMENT_TIMEOUT:
#                 print("Timeout waiting for echo start")
#                 return None
        
#         # Record time when echo goes low
#         end_time = time.time()
#         timeout_start = end_time
        
#         # Wait for echo to go low (with timeout)
#         while GPIO.input(ECHO_PIN) == 1:
#             end_time = time.time()
#             if end_time - timeout_start > MEASUREMENT_TIMEOUT:
#                 print("Timeout waiting for echo end")
#                 return None
        
#         # Calculate distance
#         # Speed of sound is 343 m/s = 34300 cm/s
#         # Distance = (Time * Speed) / 2 (divide by 2 because sound travels to object and back)
#         pulse_duration = end_time - start_time
#         distance = (pulse_duration * 34300) / 2
        
#         # Validate measurement
#         if distance < 2 or distance > MAX_DISTANCE_CM:
#             print(f"Invalid distance measurement: {distance:.2f} cm")
#             return None
            
#         return distance
        
#     except Exception as e:
#         print(f"Error measuring distance: {e}")
#         return None

# def get_stable_distance_reading():
#     """
#     Takes multiple distance measurements and returns the average for stability.
#     Returns:
#         float: Average distance in centimeters, or None if all measurements failed
#     """
#     measurements = []
    
#     for i in range(NUM_SAMPLES):
#         distance = measure_distance_cm()
#         if distance is not None:
#             measurements.append(distance)
#         time.sleep(0.1)  # Small delay between measurements
    
#     if not measurements:
#         print("All distance measurements failed")
#         return None
    
#     # Remove outliers (simple method: remove measurements more than 20% away from median)
#     measurements.sort()
#     median = measurements[len(measurements) // 2]
#     filtered_measurements = [m for m in measurements if abs(m - median) / median < 0.2]
    
#     if not filtered_measurements:
#         filtered_measurements = measurements  # Use all if filtering removes everything
    
#     average_distance = sum(filtered_measurements) / len(filtered_measurements)
#     print(f"Distance measurements: {measurements}, Average: {average_distance:.2f} cm")
    
#     return average_distance

# def calculate_tank_level(distance_cm):
#     """
#     Converts distance measurement to tank level and volume.
#     Returns:
#         tuple: (level_percentage, volume_liters, level_cm)
#     """
#     if distance_cm is None:
#         return 0.0, 0.0, 0.0
    
#     # Calculate actual liquid level
#     # distance_cm is from sensor to liquid surface
#     # level_cm is height of liquid from tank bottom
#     level_cm = TANK_HEIGHT_CM - (distance_cm - SENSOR_OFFSET_CM)
    
#     # Ensure level is within valid range
#     level_cm = max(0, min(level_cm, TANK_HEIGHT_CM))
    
#     # Calculate level as percentage
#     level_percentage = (level_cm / TANK_HEIGHT_CM) * 100
    
#     # Calculate volume (assuming cylindrical tank)
#     volume_liters = (level_cm / TANK_HEIGHT_CM) * TANK_VOLUME_LITERS
    
#     return level_percentage, volume_liters, level_cm

# # --- Data Generation Function ---
# def generate_tank_data(station_id: str):
#     """Generates a Tank data record based on HC-SR04 sensor reading."""
#     current_time_utc = datetime.now(timezone.utc)
    
#     # Get stable distance reading
#     distance_cm = get_stable_distance_reading()
    
#     # Calculate tank level and volume
#     level_percentage, volume_liters, level_cm = calculate_tank_level(distance_cm)
    
#     print(f"Sensor reading: Distance={distance_cm:.2f}cm, Level={level_percentage:.1f}%, Volume={volume_liters:.1f}L")
    
#     # For temperature and density, you might:
#     # 1. Use additional sensors (e.g., DS18B20 for temperature)
#     # 2. Use fixed values based on the liquid type
#     # 3. Simulate them for now
    
#     # Simulate temperature (you can replace with actual sensor reading)
#     temperature = round(random.uniform(15.0, 35.0), 2)
    
#     # Use typical density for petrol (you can make this configurable)
#     density = round(random.uniform(720.0, 780.0), 2)  # kg/m³ for petrol
    
#     # Calculate quantity (mass) = volume * density
#     quantity = round(volume_liters * density / 1000, 2)  # Convert to tonnes
    
#     return Tank(
#         id=str(uuid.uuid4()),
#         type="petrol",  # Or make this configurable
#         level=round(level_percentage, 2),
#         temperature=temperature,
#         density=density,
#         volume=round(volume_liters, 2),
#         quantity=quantity,
#         createdAt=current_time_utc,
#         updateAt=current_time_utc,
#         station_id=station_id,
#         is_sent=False
#     )

# # --- Main Logic ---
# def run_monitor():
#     print(f"Starting Raspberry Pi Tank Monitor with HC-SR04 for Station ID: {STATION_ID}")
#     print(f"Sending data to FastAPI server at: {FASTAPI_BASE_URL}/tanks/receive-data")
#     print(f"Data will be stored in local DB: {DB_FILE}")
    
#     # Warm up the sensor
#     if GPIO_AVAILABLE:
#         print("Warming up HC-SR04 sensor...")
#         for _ in range(3):
#             measure_distance_cm()
#             time.sleep(1)
#         print("Sensor ready!")
    
#     while True:
#         session = Session()
#         try:
#             # 1. Generate new data based on sensor reading and save it locally
#             new_reading = generate_tank_data(STATION_ID)
#             session.add(new_reading)
#             session.commit()
#             print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Generated and saved new reading locally: Level={new_reading.level}%, Volume={new_reading.volume}L, Temp={new_reading.temperature}°C")
            
#             # 2. Retrieve unsent data
#             unsent_readings = session.query(Tank).filter_by(is_sent=False).all()
#             if not unsent_readings:
#                 print("No unsent readings to send.")
#                 session.close()
#                 time.sleep(SEND_INTERVAL_SECONDS)
#                 continue
#             print(f"Attempting to send {len(unsent_readings)} unsent readings to main server...")
            
#             # Prepare batch payload
#             payload = [reading.to_dict() for reading in unsent_readings]
            
#             # 3. Send data to FastAPI server
#             response = requests.post(f"{FASTAPI_BASE_URL}/tanks/receive-data", json=payload)
#             response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)
            
#             # 4. Mark data as sent if successful
#             for reading in unsent_readings:
#                 reading.is_sent = True
#             session.commit()
#             print(f"Successfully sent {len(unsent_readings)} readings to main server and marked as sent.")
#         except requests.exceptions.ConnectionError as e:
#             print(f"Connection error to FastAPI server: {e}. Retrying in {SEND_INTERVAL_SECONDS} seconds.")
#             session.rollback() # Rollback any pending changes if connection failed
#         except requests.exceptions.HTTPError as e:
#             print(f"HTTP error from FastAPI server: {e.response.status_code} - {e.response.text}. Retrying...")
#             session.rollback()
#         except Exception as e:
#             print(f"An unexpected error occurred: {e}")
#             session.rollback() # Rollback on other errors too
#         finally:
#             session.close() # Always close the session
#         time.sleep(SEND_INTERVAL_SECONDS) # Wait for the next interval

# if __name__ == "__main__":
#     try:
#         run_monitor()
#     except KeyboardInterrupt:
#         print("Monitoring stopped by user.")
#     finally:
#         if GPIO_AVAILABLE:
#             GPIO.cleanup() # Clean up GPIO settings on exit
#             print("GPIO cleaned up.")



# # .env for Raspberry Pi
# # Replace with the actual IP address of your main machine running FastAPI
# # and the port your FastAPI is listening on.
# FASTAPI_BASE_URL=http://192.168.1.138:8000

# # IMPORTANT: Replace with a UUID from your main MySQL database's stationservice table.
# # You must first create a StationService record in your main DB (e.g., via FastAPI admin)
# # and get its ID. This ID represents the petrol station this Raspberry Pi is monitoring.
# STATION_ID=b3ef0703-87c8-48ad-9246-df099d5fec9d
# # Example: 12345678-abcd-efab-cdef-1234567890ab